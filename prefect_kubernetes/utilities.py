from kubernetes.client.models import (
    V1Container,
    V1EnvVar,
    V1Job,
    V1JobSpec,
    V1JobStatus,
    V1ObjectMeta,
    V1PodSpec,
    V1PodTemplate,
    V1PodTemplateSpec,
)


def kube_create_job_object(
    name,
    container_image,
    namespace="default",
    container_name="jobcontainer",
    env_vars={},
):
    """
    Create a k8 Job Object
    Minimum definition of a job object:
    {'api_version': None, - Str
    'kind': None,     - Str
    'metadata': None, - Metada Object
    'spec': None,     -V1JobSpec
    'status': None}   - V1Job Status
    Docs: https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/V1Job.md
    Docs2: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#writing-a-job-spec
    Also docs are pretty pretty bad. Best way is to ´pip install kubernetes´ and go via the autogenerated code
    And figure out the chain of objects that you need to hold a final valid object So for a job object you need:
    V1Job -> V1ObjectMeta
          -> V1JobStatus
          -> V1JobSpec -> V1PodTemplate -> V1PodTemplateSpec -> V1Container

    Now the tricky part, is that V1Job.spec needs a .template, but not a PodTemplateSpec, as such
    you need to build a PodTemplate, add a template field (template.template) and make sure
    template.template.spec is now the PodSpec.
    Then, the V1Job.spec needs to be a JobSpec which has a template the template.template field of the PodTemplate.
    Failure to do so will trigger an API error.
    Also Containers must be a list!
    Docs3: https://github.com/kubernetes-client/python/issues/589
    """
    body = V1Job(api_version="batch/v1", kind="Job")
    # Body needs Metadata
    # Attention: Each JOB must have a different name!
    body.metadata = V1ObjectMeta(namespace=namespace, name=name)
    # And a Status
    body.status = V1JobStatus()

    template = V1PodTemplate()
    template.template = V1PodTemplateSpec()
    env_list = [
        V1EnvVar(name=env_name, value=env_value)
        for env_name, env_value in env_vars.items()
    ]
    container = V1Container(name=container_name, image=container_image, env=env_list)

    template.template.spec = V1PodSpec(containers=[container], restart_policy="Never")

    body.spec = V1JobSpec(ttl_seconds_after_finished=600, template=template.template)
    return body
